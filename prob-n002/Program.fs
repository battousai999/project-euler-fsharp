// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

open System
open System.Diagnostics

let measure f =
    let sw = Stopwatch.StartNew()
    f()
    sw.Stop()
    printfn "Duration %s ms" (sw.ElapsedMilliseconds.ToString("#,##0"))

let fibSequence : seq<bigint> =
    let rec fibInner (a: bigint) (b: bigint) = seq { yield (a + b); yield! (fibInner b (a + b)) }
    seq { yield 1I; yield 2I; yield! fibInner 1I 2I }

let problem (limit: bigint) =
    let answer = fibSequence
                    |> Seq.takeWhile (fun x -> x <= limit)
                    |> Seq.filter (fun x -> x % 2I = 0I)
                    |> Seq.sum
    Console.WriteLine answer

[<EntryPoint>]
let main argv =
    measure (fun () -> problem 4000000I)
    0
